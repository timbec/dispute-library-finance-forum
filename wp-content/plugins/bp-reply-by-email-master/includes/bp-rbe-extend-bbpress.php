<?php
/**
 * bbPress Reply By Email Extension.
 *
 * Allows BP group members to reply to bbPress forum posts via email.
 *
 * Forum replies will be posted directly into the bbPress forum thread
 * and not as a nested activity comment.
 *
 * Requires the BP Group Email Subscription plugin
 * {@link http://wordpress.org/extend/plugins/buddypress-group-email-subscription/}
 * for the emails to be sent out.
 *
 * Your Group Email setting must be set to "All Mail" to reply to bbP posts.
 *
 * Can also post new topics via email in both BuddyPress groups and to
 * regular bbPress forums.
 *
 * @todo Re-enable ability to reply to regular bbPress topics (forums not attached
 *       to BuddyPress). Need to fix post link bug in email.
 *
 * @package BP_Reply_By_Email
 * @subpackage Classes
 */

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit;

/**
 * Adds RBE support to the bbPress plugin.
 *
 * Extends the abstract {@link BP_Reply_By_Email_Extension} class, which
 * helps do a lot of the dirty work!
 *
 * @package BP_Reply_By_Email
 * @subpackage Extensions
 * @since 1.0-RC1
 */
class BBP_RBE_Extension extends BP_Reply_By_Email_Extension {

	/**
	 * Constructor.
	 */
	public function __construct() {

		// (required) must use the bootstrap() method in your constructor!
		// once you've used the bootstrap() method, you can call your params magically
		// eg.
		//    $this->id
		//    $this->activity_type
		$this->bootstrap( array(
			'id'            => 'bbpress-groups',   // your extension name
			'activity_type' => 'bbp_reply_create', // we have to actually match two activity types, so we're going to override the
			                                       // extend_activity_listener() method
			'item_id_param' => 'bbpg',             // parameter name for your activity 'item_id'; in our case 'item_id' is the
			                                       // group ID, hence the shortname 'bbpg'
			'secondary_item_id_param' => 'bbpt',   // parameter name for your activity 'secondary_item_id'; in our case
			                                       // 'secondary_item_id' will be the topic ID we want to reply to, hence
			                                       // the shortname 'bbpt'

			// custom params
			// here you can add whatever you want and you can use it in your class
			'forum_id_param' => 'bbpf',
			'reply_id_param' => 'bbpr'
		) );

		// custom hooks
		$this->custom_hooks();

	}

	/**
	 * Some custom hooks this class uses.
	 */
	private function custom_hooks() {
		// register our additional param with RBE
		add_filter( 'bp_rbe_allowed_params',             array( $this, 'register_custom_params' ) );

		// add new topic CSS to a bbPress forum page
		add_filter( 'bp_rbe_new_topic_info_css',         array( $this, 'new_topic_via_email_css' ) );

		// add "Post New Topic via Email" block for bbP
		add_action( 'bbp_theme_before_topic_form_title', array( $this, 'new_topic_via_email_block' ) );

		// modify querystring in 'new topic' group email address
		add_filter( 'bp_rbe_encode_group_querystring',   array( $this, 'new_topic_querystring' ), 10, 2 );

		// clear locally-cached values after post is submitted
		add_action( 'bp_rbe_no_match',                   array( $this, 'clear_global_cache' ) );
		add_action( 'bbp_new_topic_post_extras',         array( $this, 'clear_global_cache' ) );
		add_action( 'bbp_new_reply_post_extras',         array( $this, 'clear_global_cache' ) );

		// New GES support.
		add_filter( 'ass_send_email_args',        array( $this, 'ges_support' ), 9999, 2 );
		add_action( 'bp_ges_after_bp_send_email', array( $this, 'ges_remove_listener' ) );

		// Attachments.
		add_action( 'bp_rbe_imap_misc_data',         array( $this, 'imap_attachments' ), 10, 5 );
		add_action( 'bp_rbe_bbpress_after_new_post', array( $this, 'post_attachments' ), 10, 2 );
	}

	/**
	 * RBE activity listener for our bbPress-GES extension.
	 *
	 * We're overriding the parent method because we're trying to match two
	 * activity types and our 'secondary_item_id' needs to be calculated in a
	 * different manner for the 'bbp_reply_create' activity type.
	 *
	 * @param obj $listener Registers your component with RBE's activity listener
	 * @param obj $item The activity object generated by BP during save.
	 */
	public function extend_activity_listener( $listener, $item ) {
		// if activity item does not match groups, stop now!
		if ( $item->component != 'groups' )
			return;

		// if activity type does not match our bbPress types, stop now!
		if ( $item->type != $this->activity_type && $item->type != 'bbp_topic_create' )
			return;

		// setup our component
		$listener->component = $this->id;

		// setup our item ID, which is the group ID
		$listener->item_id   = $item->item_id;

		// setup our secondary item ID, which is the topic ID
		$listener->secondary_item_id = $item->secondary_item_id;

		// setup our reply to ID, which is the reply post ID
		$listener->reply_to_id = $item->secondary_item_id;

		// setup our user ID
		$listener->user_id = $item->user_id;

		// if activity type is a bbPress reply, we need to grab the topic ID manually
		if ( $item->type == $this->activity_type ) {
			$listener->secondary_item_id = bbp_get_reply_topic_id( $item->secondary_item_id );
			$listener->reply_to_id       = bbp_get_reply_to( $item->secondary_item_id );
		}

	}

	/**
	 * Sets up the querystring used in the 'Reply-To' email address.
	 *
	 * Overrides our parent method to support our second component listener in
	 * the bbp_listener() method.
	 *
 	 * @param string $querystring Querystring used to form the "Reply-To" email address.
 	 * @param obj $listener The listener object registered in the extend_activity_listener() method.
 	 * @param string $querystring
	 */
	public function extend_querystring( $querystring, $listener ) {
		switch ( $listener->component ) {

			// check to see if the listener component matches our extension's unique ID
			// if it does, proceed with setting up our custom querystring
			case $this->id :
				// BuddyPress group ID.
				$querystring = "{$this->item_id_param}={$listener->item_id}";

				// Topic post ID.
				if ( ! empty( $this->secondary_item_id_param ) ) {
					$querystring .= "&{$this->secondary_item_id_param}={$listener->secondary_item_id}";
				}

				// Reply post ID.
				if ( ! empty( $this->reply_id_param ) ) {
					$querystring .= "&{$this->reply_id_param}={$listener->reply_to_id}";
				}

				break;

			// check to see if component matches our secondary listener as defined in the
			// BP_Reply_By_Email::bbp_listener() method
			case 'bbpress' :
				// Topic post ID.
				$querystring = "{$this->secondary_item_id_param}={$listener->item_id}";

				// Reply post ID.
				if ( ! empty( $this->reply_id_param ) ) {
					$querystring .= "&{$this->reply_id_param}={$listener->reply_to_id}";
				}

				/**
				 * Special case for users subscribed to a topic for a group forum.
				 *
				 * This is needed so GES can continue sending their subscriptions.
				 */
				$group_ids = bbp_get_forum_group_ids( bbp_get_topic_forum_id( $listener->item_id ) );
				if ( ! empty( $group_ids[0] ) ) {
					$querystring  .= "&{$this->item_id_param}={$group_ids[0]}";
				}

				break;
		}

		return $querystring;
	}

	/**
	 * Post by email handler.
	 *
	 * For bbPress, the logic in this method is the same as {@link bbp_new_reply_handler()}.
	 * It's duplicated because bbPress doesn't utilize hooks for verifying replies.
	 *
	 * @param bool $retval True by default.
	 * @param array $data {
	 *     An array of arguments.
	 *
	 *     @type array $headers Email headers.
	 *     @type string $content The email body content.
	 *     @type string $subject The email subject line.
	 *     @type int $user_id The user ID who sent the email.
	 *     @type bool $is_html Whether the email content is HTML or not.
	 *     @type int $i The email message number.
	 * }
	 * @param array $params Parsed paramaters from the email address querystring.
	 *   See {@link BP_Reply_By_Email_Parser::get_parameters()}.
	 * @return array|object Array of the parsed item on success. WP_Error object
	 *  on failure.
	 */
	public function post( $retval, $data, $params ) {
		/** SETUP DATA ***************************************************/

		// reset globals
		global $bp;

		if ( empty( $bp->rbe->temp ) ) {
			$bp->rbe       = new stdClass;
			$bp->rbe->temp = new stdClass;
		}

		$i       = $data['i'];
		$user_id = (int) $data['user_id'];

		// get topic ID
		$topic_id = ! empty( $params[$this->secondary_item_id_param] ) ? $params[$this->secondary_item_id_param] : false;

		// get reply post ID
		$reply_to = ! empty( $params[$this->reply_id_param] ) ? $params[$this->reply_id_param] : 0;

		// Not a bbPress item, so bail.
		if ( ! ( $topic_id || ! empty( $params[$this->forum_id_param] ) ) ) {
			return $retval;
		}

		/*
		 * Multisite sanity check for bbPress.
		 *
		 * It's possible that the sub-site might no longer have bbPress active.  If
		 * that's the case, we need to bail out of posting forum items.
		 */
		if ( ! empty( $params['b'] ) ) {
			// Ugh, object cache doesn't work properly when used in IMAP mode.
			if ( ! bp_rbe_is_inbound() ) {
				wp_cache_delete( 'alloptions', 'options' );
				wp_cache_delete( 'active_plugins', 'options' );
			}

			/*
			 * Replacement for is_plugin_active().
			 *
			 * We're not using that b/c you need to include the
			 * /wp-admin/includes/plugin.php file in order to use that function.
			 */
			$bb_file         = 'bbpress/bbpress.php';
			$sub_site_check  = in_array( $bb_file, (array) get_option( 'active_plugins', array() ) );
			$network_check   = get_site_option( 'active_sitewide_plugins' );
			$network_check   = isset( $network_check[ $bb_file ] );

			$bb_check = $sub_site_check || $network_check;
			if ( ! $bb_check ) {
				return new WP_Error( 'bbpress_not_active', '', $data );
			}
		}

		// current email is not a bbPress group reply
		if ( empty( $topic_id ) ) {
			// if current email is a bbPress new group topic, parse it
			if ( ! empty( $params[$this->forum_id_param] ) ) {
				$retval = $this->post_new_topic( $data, $params );
			}

			return $retval;
		}

		/* current email is a bbPress group reply, let's proceed! */

		// let RBE know that we're in the process of rendering a bbP reply
		// BuddyPress group forum reply
		if ( ! empty( $params[$this->item_id_param] ) ) {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress group forum reply' );

		// bbPress
		} else {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress forum reply' );
		}

		// other variables
		$reply_author   = $user_id;
		$anonymous_data = 0;

		/** GROUP PERMISSIONS ********************************************/

		// posting from a BP group
		if ( ! empty( $params[$this->item_id_param] ) ) {
			// set group ID and cache it in global for later use
			// $bp->rbe->temp->group_id gets passed to the set_group_id() method later on
			$group_id = $bp->rbe->temp->group_id = $params[$this->item_id_param];

			// get all group member data for the user in one swoop!
			$group_member_data = bp_rbe_get_group_member_info( $reply_author, $group_id );

			// user is not a member of the group anymore
			if ( empty( $group_member_data ) ) {
				//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_not_group_member' );
				return new WP_Error( 'user_not_group_member', '', $data );
			}

			// user is banned from group
			if ( (int) $group_member_data->is_banned == 1 ) {
				//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_banned_from_group' );
				return new WP_Error( 'user_banned_from_group', '', $data );
			}

			// override groups_get_current_group() with our cached group ID
			add_filter( 'groups_get_current_group',  array( $this, 'set_group_id' ) );

			// GES: remove their subscription filter and add our own.
			if ( has_filter( 'bbp_subscription_mail_title', 'ass_bbp_add_topic_subscribers_filter' ) ) {
				remove_filter( 'bbp_subscription_mail_title', 'ass_bbp_add_topic_subscribers_filter', 99 );
			}
			add_filter( 'bbp_get_topic_subscribers', array( $this, 'bbp_remove_subscribers' ) );

			// temporarily add some GES filters here
			add_filter( 'bp_ass_activity_notification_subject', 'wp_specialchars_decode' );
			add_filter( 'bp_ass_activity_notification_content', 'wp_specialchars_decode' );
		}

		/** SUBSCRIPTIONS ************************************************/

		/**
		 * Make sure the author stays subscribed to the thread.
		 *
		 * This is due to how {@link bbp_update_reply()} works.
		 */
		if ( bbp_is_subscriptions_active() && bbp_is_user_subscribed( $reply_author, $topic_id ) ) {
			$_POST['bbp_topic_subscription'] = 'bbp_subscribe';
		}

		/** REPLY PERMISSIONS ********************************************/

		// Allow member to pass default cap checks.
		// The reason why we keep the 'publish_replies' check below is b/c bbPress
		// plugins may disable cap access for a specific user if they have hooked into
		// the 'bbp_map_meta_caps' filter.
		add_filter( 'bbp_map_meta_caps', array( $this, 'map_forum_meta_caps' ), 5, 4 );

		// User cannot create replies
		if ( ! user_can( $reply_author, 'publish_replies' ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_permissions' );
			return new WP_Error( 'bbp_reply_permissions', '', $data );
		}

		/** UNFILTERED HTML **********************************************/

		// Remove wp_filter_kses filters from title and content for capable users
		if ( user_can( $user_id, 'unfiltered_html' ) ) {
			remove_filter( 'bbp_new_reply_pre_title',   'wp_filter_kses' );
			remove_filter( 'bbp_new_reply_pre_content', 'wp_filter_kses' );
		}

		/** REPLY DATA ***************************************************/

		// setup a dummy reply title b/c bbP requires it
		$reply_title = sprintf( __( 'Reply To: Topic ID %d', 'bp-rbe' ), $topic_id );

		// Filter and sanitize
		$reply_content = apply_filters( 'bbp_new_reply_pre_content', $data['content'] );

		/** REPLY MODERATION *********************************************/

		// Reply Duplicate
		if ( ! bbp_check_for_duplicate( array(
			'post_type'      => bbp_get_reply_post_type(),
			'post_author'    => $reply_author,
			'post_content'   => $reply_content,
			'post_parent'    => $topic_id,
			'anonymous_data' => $anonymous_data
		 ) ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_duplicate' );
			return new WP_Error( 'bbp_reply_duplicate', '', $data );
		}

		// Reply Blacklist
		if ( ! bbp_check_for_blacklist( $anonymous_data, $reply_author, $reply_title, $reply_content ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_blacklist' );
			return new WP_Error( 'bbp_reply_blacklist', '', $data );
		}

		// Reply Status
		// Maybe put into moderation
		if ( ! bbp_check_for_moderation( $anonymous_data, $reply_author, $reply_title, $reply_content ) ) {
			$reply_status = bbp_get_pending_status_id();

		// Default
		} else {
			$reply_status = bbp_get_public_status_id();
		}

		/** POSTING TIME! ************************************************/

		// get forum ID
		$forum_id = bbp_get_topic_forum_id( $topic_id );

		// bbP hook before save
		do_action( 'bbp_new_reply_pre_extras', $topic_id, $forum_id );

		// Setup reply data
		$reply_data = apply_filters( 'bbp_new_reply_pre_insert', array(
			'post_author'    => $reply_author,
			'post_title'     => $reply_title,
			'post_content'   => $reply_content,
			'post_status'    => $reply_status,
			'post_parent'    => $topic_id,
			'post_type'      => bbp_get_reply_post_type(),
			'comment_status' => 'closed',
			'menu_order'     => bbp_get_topic_reply_count( $topic_id, false ) + 1
		) );

		// Insert reply
		$reply_id = wp_insert_post( $reply_data );

		// Reply posted!
		if ( ! is_wp_error( $reply_id ) ) {
			// more internal logging
			bp_rbe_log( 'Message #' . $i . ': bbPress reply successfully posted!' );

		// Problem posting
		} else {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_error' );
			return new WP_Error( 'bbp_reply_error', '', $data );
		}

		/** AFTER POSTING ************************************************/

		// stuff that needs to happen after a bbP reply is posted occurs here... bbP
		// should preferably do the following at the 'bbp_new_reply' hook, until then
		// do what bbP does inline.

		// Trash Check ////////////////////////////////////////////////////

		// If this reply starts as trash, add it to pre_trashed_replies
		// for the topic, so it is properly restored.
		if ( bbp_is_topic_trash( $topic_id ) || ( $reply_data['post_status'] == bbp_get_trash_status_id() ) ) {

			// Trash the reply
			wp_trash_post( $reply_id );

			// Only add to pre-trashed array if topic is trashed
			if ( bbp_is_topic_trash( $topic_id ) ) {

				// Get pre_trashed_replies for topic
				$pre_trashed_replies = get_post_meta( $topic_id, '_bbp_pre_trashed_replies', true );

				// Add this reply to the end of the existing replies
				$pre_trashed_replies[] = $reply_id;

				// Update the pre_trashed_reply post meta
				update_post_meta( $topic_id, '_bbp_pre_trashed_replies', $pre_trashed_replies );
			}

		// Spam Check /////////////////////////////////////////////////////

		// If reply or topic are spam, officially spam this reply
		} elseif ( bbp_is_topic_spam( $topic_id ) || ( $reply_data['post_status'] == bbp_get_spam_status_id() ) ) {
			add_post_meta( $reply_id, '_bbp_spam_meta_status', bbp_get_public_status_id() );

			// Only add to pre-spammed array if topic is spam
			if ( bbp_is_topic_spam( $topic_id ) ) {

				// Get pre_spammed_replies for topic
				$pre_spammed_replies = get_post_meta( $topic_id, '_bbp_pre_spammed_replies', true );

				// Add this reply to the end of the existing replies
				$pre_spammed_replies[] = $reply_id;

				// Update the pre_spammed_replies post meta
				update_post_meta( $topic_id, '_bbp_pre_spammed_replies', $pre_spammed_replies );
			}
		}

		// Reply By Email /////////////////////////////////////////////////

		// Add a RBE marker to the post's meta
		// Could potentially show that post was made via email on the frontend
		add_post_meta( $reply_id, 'bp_rbe', 1 );

		/** POST HOOKS ***************************************************/

		// RBE Custom Hooks ///////////////////////////////////////////////

		// change activity action
		add_filter( 'bbp_before_record_activity_parse_args', array( $this, 'change_activity_action' ) );

		// add RBE's special activity hook
		add_action( 'bp_activity_after_save',                array( $this, 'activity_rbe_hook' ) );

		/**
		 * Custom hook to do something with the new bbPress post ID and RBE data.
		 *
		 * @since 1.0-RC6
		 *
		 * @param int   $reply_id WP post ID.
		 * @param array $data     Email data.
		 */
		do_action( 'bp_rbe_bbpress_after_new_post', $reply_id, $data );

		// bbPress Reply Hooks ////////////////////////////////////////////

		do_action( 'bbp_new_reply',                          $reply_id, $topic_id, $forum_id, $anonymous_data, $reply_author, false, $reply_to );
		do_action( 'bbp_new_reply_post_extras',              $reply_id );

		// Remove some filters after reply hook for groups.
		if ( ! empty( $params[$this->item_id_param] ) ) {
			remove_filter( 'bbp_get_topic_subscribers', array( $this, 'bbp_remove_subscribers' ) );
		}

		// Undo subscription hack.
		if ( isset( $_POST['bbp_topic_subscription'] ) ) {
			unset( $_POST['bbp_topic_subscription'] );
		}

		return array( 'bbp_reply_id' => $reply_id );
	}

	/**
	 * Post new topic by email handler.
	 *
	 * For bbPress, the logic in this method is the same as {@link bbp_new_topic_handler()}.
	 * It's duplicated because bbPress doesn't utilize hooks for verifying topics.
	 *
	 * @todo No fancy support for topic tags, subscriptions yet. Will probably need shortcodes.
	 *
	 * @param array $data {
	 *     An array of arguments.
	 *
	 *     @type array $headers Email headers.
	 *     @type string $content The email body content.
	 *     @type string $subject The email subject line.
	 *     @type int $user_id The user ID who sent the email.
	 *     @type bool $is_html Whether the email content is HTML or not.
	 *     @type int $i The email message number.
	 * }
	 * @param array $params Parsed paramaters from the email address querystring.
	 *   See {@link BP_Reply_By_Email_Parser::get_parameters()}.
	 * @return array|object Array of the parsed item on success. WP_Error object
	 *  on failure.
	 */
	private function post_new_topic( $data, $params ) {
	//private function post_new_topic( $connection, $i, $headers, $params, $body, $topic_author ) {

		/** SETUP DATA ***************************************************/

		$i            = $data['i'];
		$topic_author = $data['user_id'];
		$forum_id     = $params[$this->forum_id_param];

		/* current email is a bbPress new topic, let's proceed! */

		// let RBE know that we're in the process of rendering a bbP new topic
		// BuddyPress group new topic
		if ( ! empty( $params[$this->item_id_param] ) ) {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress group forum new topic' );

		// bbPress
		} else {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress new topic' );
		}

		// other variables
		$anonymous_data = 0;

		/** GROUP PERMISSIONS ********************************************/

		// posting from a BP group
		if ( ! empty( $params[$this->item_id_param] ) ) {
			global $bp;

			// set group ID and cache it in global for later use
			// $bp->rbe->temp->group_id gets passed to the set_group_id() method later on
			$group_id = $bp->rbe->temp->group_id = $params[$this->item_id_param];

			// get all group member data for the user in one swoop!
			$group_member_data = bp_rbe_get_group_member_info( $topic_author, $group_id );

			// user is not a member of the group anymore
			if ( empty( $group_member_data ) ) {
				//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_not_group_member' );
				return new WP_Error( 'user_not_group_member', '', $data );
			}

			// user is banned from group
			if ( (int) $group_member_data->is_banned == 1 ) {
				//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_banned_from_group' );
				return new WP_Error( 'user_banned_from_group', '', $data );
			}

			// override groups_get_current_group() with our cached group ID
			add_filter( 'groups_get_current_group', array( $this, 'set_group_id' ) );

			// GES: remove their subscription filter and add our own.
			if ( has_filter( 'bbp_subscription_mail_title', 'ass_bbp_add_topic_subscribers_filter' ) ) {
				remove_filter( 'bbp_subscription_mail_title', 'ass_bbp_add_topic_subscribers_filter', 99 );
			}
			add_filter( 'bbp_get_forum_subscribers', array( $this, 'bbp_remove_subscribers' ) );

			// temporarily add some GES filters here
			add_filter( 'bp_ass_activity_notification_subject', 'wp_specialchars_decode' );
			add_filter( 'bp_ass_activity_notification_content', 'wp_specialchars_decode' );
		}

		/** TOPIC / FORUM PERMISSIONS ************************************/

		// Allow member to pass default cap checks.
		// The reason why we keep the user_can() checks below is b/c bbPress
		// plugins may disable cap access for a specific user if they have hooked into
		// the 'bbp_map_meta_caps' filter.
		add_filter( 'bbp_map_meta_caps', array( $this, 'map_forum_meta_caps' ), 5, 4 );

		// User cannot create topics
		if ( ! user_can( $topic_author, 'publish_topics' ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_permissions' );
			return new WP_Error( 'bbp_topic_permissions', '', $data );
		}

		// Forum is a category
		if ( bbp_is_forum_category( $forum_id ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_category' );
			//bbp_add_error( 'bbp_edit_topic_forum_category', __( '<strong>ERROR</strong>: This forum is a category. No topics can be created in this forum.', 'bbpress' ) );
			return new WP_Error( 'bbp_edit_topic_forum_category', '', $data );

		// Forum is not a category
		} else {

			// Forum is closed and user cannot access
			if ( bbp_is_forum_closed( $forum_id ) && ! user_can( $topic_author, 'edit_forum' ) ) {
				//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_closed' );
				//bbp_add_error( 'bbp_edit_topic_forum_closed', __( '<strong>ERROR</strong>: This forum has been closed to new topics.', 'bbpress' ) );
				return new WP_Error( 'bbp_edit_topic_forum_closed', '', $data );
			}

			// Forum is private and user cannot access
			if ( bbp_is_forum_private( $forum_id ) ) {
				if ( ! user_can( $topic_author, 'read_private_forums' ) ) {
					//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_private' );
					//bbp_add_error( 'bbp_edit_topic_forum_private', __( '<strong>ERROR</strong>: This forum is private and you do not have the capability to read or create new topics in it.', 'bbpress' ) );
					return new WP_Error( 'bbp_edit_topic_forum_private', '', $data );
				}
			}

			// Forum is hidden and user cannot access
			if ( bbp_is_forum_hidden( $forum_id ) ) {
				if ( ! user_can( $topic_author, 'read_hidden_forums' ) ) {
					//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_hidden' );
					//bbp_add_error( 'bbp_edit_topic_forum_hidden', __( '<strong>ERROR</strong>: This forum is hidden and you do not have the capability to read or create new topics in it.', 'bbpress' ) );
					return new WP_Error( 'bbp_edit_topic_forum_hidden', '', $data );
				}
			}
		}

		/** UNFILTERED HTML **********************************************/

		// Remove wp_filter_kses filters from title and content for capable users
		if ( user_can( $topic_author, 'unfiltered_html' ) ) {
			remove_filter( 'bbp_new_topic_pre_title',   'wp_filter_kses' );
			remove_filter( 'bbp_new_topic_pre_content', 'wp_filter_kses' );
		}

		/** TOPIC DATA ***************************************************/

		$topic_content = $data['content'];
		$topic_title   = $data['subject'];

		bp_rbe_log( 'Message #' . $i . ': body contents - ' . $topic_content );
		bp_rbe_log( 'Subject - ' . $topic_title );

		if ( empty( $topic_content ) || empty( $topic_title ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_new_forum_topic_empty' );
			return new WP_Error( 'bbp_new_forum_topic_empty', '', $data );
		}

		// Filter and sanitize
		$topic_title   = apply_filters( 'bbp_new_topic_pre_title',   $topic_title );
		$topic_content = apply_filters( 'bbp_new_topic_pre_content', $topic_content );

		/** Topic Tags ****************************************************/

		/* TODO
		if ( bbp_allow_topic_tags() ) {

			// Escape tag input
			$terms = esc_attr( strip_tags( $_POST['bbp_topic_tags'] ) );

			// Explode by comma
			if ( strstr( $terms, ',' ) ) {
				$terms = explode( ',', $terms );
			}

			// Add topic tag ID as main key
			$terms = array( bbp_get_topic_tag_tax_id() => $terms );
		}
		*/

		/** TOPIC MODERATION *********************************************/

		// Topic Duplicate
		if ( ! bbp_check_for_duplicate( array(
			'post_type'      => bbp_get_topic_post_type(),
			'post_author'    => $topic_author,
			'post_content'   => $topic_content,
			'anonymous_data' => $anonymous_data
		 ) ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_duplicate' );
			return new WP_Error( 'bbp_topic_duplicate', '', $data );
		}

		// Topic Blacklist
		if ( ! bbp_check_for_blacklist( $anonymous_data, $topic_author, $topic_title, $topic_content ) ) {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_blacklist' );
			return new WP_Error( 'bbp_topic_blacklist', '', $data );
		}

		// Topic Status
		// Maybe put into moderation
		if ( ! bbp_check_for_moderation( $anonymous_data, $topic_author, $topic_title, $topic_content ) ) {
			$topic_status = bbp_get_pending_status_id();

		// Default
		} else {
			$topic_status = bbp_get_public_status_id();
		}

		/** POSTING TIME! ************************************************/

		// bbP hook before save
		do_action( 'bbp_new_topic_pre_extras', $forum_id );

		// Setup reply data
		$topic_data = apply_filters( 'bbp_new_topic_pre_insert', array(
			'post_author'    => $topic_author,
			'post_title'     => $topic_title,
			'post_content'   => $topic_content,
			'post_status'    => $topic_status,
			'post_parent'    => $forum_id,
			'post_type'      => bbp_get_topic_post_type(),
			//'tax_input'    => false,
			'comment_status' => 'closed'
		) );

		// Insert topic
		$topic_id = wp_insert_post( $topic_data );

		// Topic posted!
		if ( ! is_wp_error( $topic_id ) ) {
			// more internal logging
			bp_rbe_log( 'Message #' . $i . ': bbPress topic successfully posted!' );

		// Problem posting
		} else {
			//do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_error' );
			return new WP_Error( 'bbp_topic_error', '', $data );
		}

		/** AFTER POSTING ************************************************/

		// stuff that needs to happen after a bbP topic is posted occurs here... bbP
		// should preferably do the following at the 'bbp_new_reply' hook, until then
		// do what bbP does inline.

		// Trash Check ////////////////////////////////////////////////////

		// If the forum is trash, or the topic_status is switched to
		// trash, trash it properly
		if ( ( get_post_field( 'post_status', $forum_id ) == bbp_get_trash_status_id() ) || ( $topic_data['post_status'] == bbp_get_trash_status_id() ) ) {

			// Trash the reply
			wp_trash_post( $topic_id );
		}

		// Spam Check /////////////////////////////////////////////////////

		// If reply or topic are spam, officially spam this reply
		if ( $topic_data['post_status'] == bbp_get_spam_status_id() ) {
			add_post_meta( $topic_id, '_bbp_spam_meta_status', bbp_get_public_status_id() );
		}

		// Reply By Email /////////////////////////////////////////////////

		// Add a RBE marker to the post's meta
		// Could potentially show that post was made via email on the frontend
		add_post_meta( $topic_id, 'bp_rbe', 1 );

		/** POST HOOKS ***************************************************/

		// RBE Custom Hooks ///////////////////////////////////////////////

		// change activity action
		add_filter( 'bbp_before_record_activity_parse_args', array( $this, 'change_activity_action' ) );

		// add RBE's special activity hook
		add_action( 'bp_activity_after_save',                array( $this, 'activity_rbe_hook' ) );

		/** This hook is documented in /includes/bp-rbe-extend-bbpress.php */
		do_action( 'bp_rbe_bbpress_after_new_post', $topic_id, $data );

		// bbPress Topic Hooks ////////////////////////////////////////////

		do_action( 'bbp_new_topic',             $topic_id, $forum_id, $anonymous_data, $topic_author );
		do_action( 'bbp_new_topic_post_extras', $topic_id );

		// Remove some filters after topic hook for groups.
		if ( ! empty( $params[$this->item_id_param] ) ) {
			remove_filter( 'bbp_get_forum_subscribers', array( $this, 'bbp_remove_subscribers' ) );
		}

		return array( 'bbp_topic_id' => $topic_id );
	}

	/**
	 * Log our extension's error messages during the post_by_email() method.
	 *
	 * @param mixed $log
	 * @param string $type Type of error message
	 * @param array $data {
	 *     An array of arguments.
	 *
	 *     @type array $headers Email headers.
	 *     @type string $content The email body content.
	 *     @type string $subject The email subject line.
	 *     @type int $user_id The user ID who sent the email.
	 *     @type bool $is_html Whether the email content is HTML or not.
	 *     @type int $i The email message number.
	 * }
	 * @param int $i The message number from the inbox loop
	 * @param resource $connection The current IMAP connection. Chances are you probably don't have to do anything with this!
	 * @return string|bool Could be a string or boolean false.
	 */
	public function internal_rbe_log( $log, $type, $data, $i, $connection ) {
		switch( $type ) {
			case 'bbpress_not_active' :
				$log = sprintf( __( "error - bbPress post failed. bbPress is not active on sub-site ID %s.", 'bp-rbe' ), $data['params']['b'] );

				break;

			/** REPLIES *****************************************************/

			case 'bbp_reply_permissions' :
				$log = __( "error - bbPress reply failed. user does not have the 'publish_replies' capability to post.", 'bp-rbe' );

				break;

			case 'bbp_reply_duplicate' :
				$log = __( "error - bbPress reply failed. duplicate reply detected.", 'bp-rbe' );

				break;

			case 'bbp_reply_blacklist' :
				$log = __( "error - bbPress reply failed. reply was blacklisted.", 'bp-rbe' );

				break;

			case 'bbp_reply_error' :
				$log = __( 'error - bbPress reply failed. reply failed to post.', 'bp-rbe' );

				break;

			/** TOPICS *****************************************************/

			case 'bbp_topic_permissions' :
				$log = __( "error - bbPress new topic failed. user does not have the 'publish_topics' capability to post.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_category' :
				$log = __( "error - bbPress new topic failed. forum is a category. topics cannot be created in forum categories.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_closed' :
				$log = __( "error - bbPress new topic failed. forum is closed. no new topics allowed.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_private' :
				$log = __( "error - bbPress new topic failed. forum is private. user doesn't have access.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_hidden' :
				$log = __( "error - bbPress new topic failed. forum is hidden. user doesn't have access.", 'bp-rbe' );

				break;

			case 'bbp_new_forum_topic_empty' :
				$log = __( "error - bbPress new topic failed. no body content.", 'bp-rbe' );

				break;

			case 'bbp_topic_duplicate' :
				$log = __( "error - bbPress new topic failed. duplicate topic detected.", 'bp-rbe' );

				break;

			case 'bbp_topic_blacklist' :
				$log = __( "error - bbPress new topic failed. topic was blacklisted.", 'bp-rbe' );

				break;

			case 'bbp_topic_error' :
				$log = __( 'error - bbPress new topic failed. topic failed to post.', 'bp-rbe' );

				break;
		}

		return $log;
	}

	/**
	 * Setup our extension's failure message to send back to the sender.
	 *
	 * @param mixed $message
	 * @param string $type Type of error message
	 * @param array $data {
	 *     An array of arguments.
	 *
	 *     @type array $headers Email headers.
	 *     @type string $content The email body content.
	 *     @type string $subject The email subject line.
	 *     @type int $user_id The user ID who sent the email.
	 *     @type bool $is_html Whether the email content is HTML or not.
	 *     @type int $i The email message number.
	 * }
	 * @param int $i The message number from the inbox loop
	 * @param resource $connection The current IMAP connection. Chances are you probably don't have to do anything with this!
	 * @return string|bool Could be a string or boolean false.
	 */
	public function failure_message_to_sender( $message, $type, $data, $i, $imap ) {
		if ( ! isset( $data['is_html'] ) ) {
			$data['is_html'] = false;
		}

		switch( $type ) {
			case 'bbpress_not_active' :
				// Sanity check!
				if ( ! is_multisite() ) {
					return $message;
				}

				$content = sprintf( __( 'Subject: %s', 'bp-rbe' ), $data['subject'] );
				$content .= "\n\n";
				$content .= sprintf( __( 'Content: %s', 'bp-rbe' ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], true, $i ) );

				$message = sprintf( __( 'Hi there,

Unfortunately, your forum reply could not be posted because it appears that the forums have been disabled on the site, "%s":
%s

Here is a copy of your email:

"%s"

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), get_blog_option( $data['params']['b'], 'blogname' ), get_blog_option( $data['params']['b'], 'siteurl' ), $content );

				break;

			/** REPLIES *****************************************************/

			case 'bbp_reply_permissions' :
				$topic = bbp_get_topic_title( $data['params']['bbpt'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your reply to the forum topic "%1$s" could not be posted because it appears that you do not have the ability to post replies.

To view the forum topic, click here: %2$s

We apologize for any inconvenience this may have caused. Here is a copy of your reply:

"%3$s"', 'bp-rbe' ), $topic, bbp_get_topic_permalink( $data['params']['bbpt'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], true, $i ) );

				break;

			case 'bbp_reply_duplicate' :
				$topic = bbp_get_topic_title( $data['params']['bbpt'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your reply to the forum topic "%1$s" could not be posted because it appears you have already made the same reply.

To view the forum topic, click here: %2$s

We apologize for any inconvenience this may have caused. Here is a copy of your reply:

"%3$s"', 'bp-rbe' ), $topic, bbp_get_topic_permalink( $data['params']['bbpt'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], true, $i ) );

				break;

			case 'bbp_reply_blacklist' :
				$topic = bbp_get_topic_title( $data['params']['bbpt'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your reply to the forum topic "%1$s" could not be posted because the content of your message was automatically marked as spam.

To view the forum topic, click here: %2$s

We apologize for any inconvenience this may have caused. Here is a copy of your reply:

"%3$s"', 'bp-rbe' ), $topic, bbp_get_topic_permalink( $data['params']['bbpt'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], true, $i ) );

				break;

			case 'bbp_reply_error' :
				$topic = bbp_get_topic_title( $data['params']['bbpt'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your reply to the forum topic "%1$s" could not be posted due to an error.

To view the forum topic, click here: %2$s

We apologize for any inconvenience this may have caused. Here is a copy of your reply:

"%3$s"', 'bp-rbe' ), $topic, bbp_get_topic_permalink( $data['params']['bbpt'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], true, $i ) );

				break;

			/** TOPICS *****************************************************/

			case 'bbp_topic_permissions' :
				$forum = bbp_get_forum_title( $data['params']['bbpf'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your new topic "%1$s" in the forum "%2$s" could not be posted because it appears that you do have the ability to post topics.

To visit the forum, click here: %3$s

We apologize for any inconvenience this may have caused. Here is a copy of your topic:

"%4$s"', 'bp-rbe' ), $data['subject'], $forum, bbp_get_forum_permalink( $data['params']['bbpf'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], false, $i ) );

				break;

			case 'bbp_edit_topic_forum_category' :
				$forum = bbp_get_forum_title( $data['params']['bbpf'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your new topic "%1$s" in the forum "%2$s" could not be posted because the forum you are attempting to post in is a forum category.  Forum categories cannot contain topics.

We apologize for any inconvenience this may have caused. Here is a copy of your topic:

"%4$s"', 'bp-rbe' ), $data['subject'], $forum, BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], false, $i ) );

				break;

			case 'bbp_edit_topic_forum_closed' :
				$forum = bbp_get_forum_title( $data['params']['bbpf'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your new topic "%1$s" in the forum "%2$s" could not be posted because the forum is closed and no new topics can be created there.

To visit the forum, click here: %3$s

We apologize for any inconvenience this may have caused. Here is a copy of your topic:

"%4$s"', 'bp-rbe' ), $data['subject'], $forum, bbp_get_forum_permalink( $data['params']['bbpf'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], false, $i ) );

				break;

			case 'bbp_edit_topic_forum_private' :
			case 'bbp_edit_topic_forum_hidden' :
				$forum = bbp_get_forum_title( $data['params']['bbpf'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your new topic "%1$s" in the forum "%2$s" could not be posted because it appears that you do not have access to that forum.

We apologize for any inconvenience this may have caused. Here is a copy of your topic:

"%3$s"', 'bp-rbe' ), $data['subject'], $forum, BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], false, $i ) );

				break;

			case 'bbp_topic_duplicate' :
				$forum = bbp_get_forum_title( $data['params']['bbpf'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your new topic "%1$s" in the forum "%2$s" could not be posted because it appears you have already created this topic before.

To visit the forum, click here: %3$s

We apologize for any inconvenience this may have caused. Here is a copy of your topic:

"%4$s"', 'bp-rbe' ), $data['subject'], $forum, bbp_get_forum_permalink( $data['params']['bbpf'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], false, $i ) );

				break;

			case 'bbp_topic_blacklist' :
				$forum = bbp_get_forum_title( $data['params']['bbpf'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your new topic "%1$s" in the forum "%2$s" could not be posted because the content of your message was automatically marked as spam.

To visit the forum, click here: %3$s

We apologize for any inconvenience this may have caused. Here is a copy of your topic:

"%4$s"', 'bp-rbe' ), $data['subject'], $forum, bbp_get_forum_permalink( $data['params']['bbpf'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], false, $i ) );

				break;

			case 'bbp_topic_error' :
				$forum = bbp_get_forum_title( $data['params']['bbpf'] );

				$message = sprintf( __( 'Hi there,

Unfortunately, your new topic "%1$s" in the forum "%2$s" could not be posted due to an error.

To visit the forum, click here: %3$s

We apologize for any inconvenience this may have caused. Here is a copy of your attempted topic:

"%4$s"', 'bp-rbe' ), $data['subject'], $forum, bbp_get_forum_permalink( $data['params']['bbpf'] ), BP_Reply_By_Email_Parser::get_body( $data['content'], $data['is_html'], false, $i ) );

				break;
		}

		return $message;
	}

	/** CUSTOM METHODS ************************************************/

	/**
	 * Registers our custom 'forum_id_param' and 'reply_id_param' params with RBE.
	 *
	 * @param array $params Whitelisted parameters used by RBE for the querystring
	 * @return array $params
	 */
	public function register_custom_params( $params ) {
		$params[$this->forum_id_param] = false;
		$params[$this->reply_id_param] = false;

		return $params;
	}

	/**
	 * Set locally-cached group ID so groups_get_current_group() will work in
	 * {@link BBP_Forums_Group_Extension::map_activity_to_group()}.
	 *
	 * @param obj|bool $group The BP group object if it exists; boolean if it doesn't
	 */
	public function set_group_id( $group ) {
		if ( ! $group ) {
			global $bp;

			// create fake group object and populate it with our locally-cached group ID
			if ( ! empty( $bp->rbe->temp->group_id ) ) {
				$group = new stdClass;
				$group->id = $bp->rbe->temp->group_id;
			}
		}

		return $group;
	}

	/**
	 * Clear lingering global cache.
	 *
	 * Interferes with email sending in the inbox loop.
	 */
	public function clear_global_cache() {
		global $bp;

		if ( ! empty( $bp->rbe->temp->group_id ) ) {
			unset( $bp->rbe->temp->group_id );
		}

		remove_filter( 'bbp_map_meta_caps', array( $this, 'map_forum_meta_caps' ), 5, 4 );
	}

	/**
	 * Allow members to pass default cap checks.
	 *
	 * A modified copy of BBP_Forums_Group_Extension::map_group_forum_meta_caps().
	 *
	 * @since 1.0-RC4
	 *
	 * @param array $caps
	 * @param string $cap
	 * @param int $user_id
	 * @param array $args
	 * @return array
	 */
	public function map_forum_meta_caps( $caps = array(), $cap = '', $user_id = 0, $args = array() ) {

		switch ( $cap ) {

			// Allow a member replying through RBE to pass these checks.
			case 'publish_replies'     :
			case 'publish_topics'      :
			case 'read_hidden_forums'  :
			case 'read_private_forums' :
				$caps = array( 'participate' );
				break;
		}

		return $caps;
	}

	/**
	 * Modify activity action to add our custom 'via email' string at the end.
	 *
	 * @param array $args Activity arguments before recording
	 */
	public function change_activity_action( $args ) {

		// modify activity action so it adds our appended 'via email' string
		// yeah... not great for localization at the moment
		$args['action'] = sprintf( __( '%s via email', 'bp-rbe' ), $args['action'] );

		return $args;
	}

	/**
	 * Add RBE's special activity hook.
	 *
	 * @param obj $activity The BP_Activity_Activity object created after save
	 */
	public function activity_rbe_hook( $activity ) {
		do_action( 'bp_rbe_new_activity', array(
			'activity_id'       => $activity->id,
			'type'              => $activity->type,
			'user_id'           => $activity->user_id,
			'item_id'           => $activity->item_id,
			'secondary_item_id' => $activity->secondary_item_id,
			'content'           => $activity->content
		) );
	}

	/**
	 * Use 'Post New Topics via Email' CSS on a bbP forum page.
	 */
	public function new_topic_via_email_css( $retval ) {
		if ( bbp_is_single_forum() )
			return true;

		return $retval;
	}

	/**
	 * Show 'Post New Topics via Email' block on a bbP forum page.
	 */
	public function new_topic_via_email_block() {
		$email = '';

		if ( ! is_user_logged_in() ) {
			return;
		}

		// BuddyPress group
		if ( bp_is_group() ) {
			$email  = bp_rbe_groups_get_encoded_email_address();
			$name   = bp_get_current_group_name();
			$header = esc_html__( 'Did you know you can post new topics to this group from your email client?', 'bp-rbe' );

		// bbPress forum
		} elseif ( bbp_is_single_forum() ) {
			$email  = $this->get_forum_encoded_email_address();
			$name   = bbp_get_forum_title();
			$header = esc_html__( 'Did you know you can post new topics to this forum from your email client?', 'bp-rbe' );
		}

		if ( empty( $email ) ) {
			return;
		}

		?>

		<div id="rbe-header" class="bbp-template-notice">
			<p><?php echo $header; ?> <a href="javascript:;" id="rbe-toggle"><?php _e( 'Find out how!', 'bp-rbe' ) ?></a></p>
		</div>

		<div id="rbe-message" class="bbp-template-notice info">
			<h5><?php printf( __( 'Send an email to <strong><a href="%1$s">%2$s</strong></a> and a new forum topic will be posted in %3$s.', 'bp-rbe' ), "mailto:{$email}", $email, $name ); ?></h5>

			<ul>
				<li><?php printf( __( 'Compose a new email from the same email address you registered with &ndash; %s', 'bp-rbe' ), '<strong>' . esc_attr( $GLOBALS['bp']->loggedin_user->userdata->user_email ) . '</strong>' ) ?>.</li>
				<li><?php _e( 'Put the address above in the "To:" field of the email.', 'bp-rbe' ) ?></li>
				<li><?php _e( 'The email subject will become the topic title.', 'bp-rbe' ) ?></li>
				<?php do_action( 'bp_rbe_new_topic_info_extra' ) ?>
			</ul>

			<p><?php _e( '<strong>Note:</strong> The email address above is unique to you and this group. Do not share this email address with anyone else! (Each group member will have their own unique email address.)', 'bp-rbe' ) ?></p>
		</div>

		<script type="text/javascript">
		jQuery(function() {
			jQuery('#rbe-toggle').show();
			jQuery('#rbe-message').hide();
			jQuery('#rbe-toggle').click(function() {
				jQuery('#rbe-message').toggle(300);
			});
		});
		</script>

		<?php
	}

	/**
	 * Replace "Post New Topics via Email" email address to work with bbPress
	 * plugin.
	 *
	 * @param str $querystring Encoded querystring used in the email address
	 * @param int $user_id The user ID
	 * @return str Encoded querystring used in the email address
	 */
	public function new_topic_querystring( $querystring = '', $user_id = false ) {
		if ( empty( $user_id ) )
			$user_id = bp_loggedin_user_id();

		if ( empty( $user_id ) )
			return false;

		// bundled forums has been disabled and replaced with bbPress plugin
		if ( ! class_exists( 'BP_Forums_Component' ) ) {
			// setup default string
			$string = $this->forum_id_param . '=' . bbp_get_forum_id();

			// if on a BP group, add an extra param
			if ( bp_is_group() ) {
				$string .= "&{$this->item_id_param}=" . bp_get_current_group_id();
			}

			// For multisite.
			if ( ! bp_is_root_blog() ) {
				$string .= '&b=' . get_current_blog_id();
			}

			$querystring = bp_rbe_encode( array(
				'string' => $string,
				'param'  => $user_id
			) );
		}

		return $querystring;
	}

	/**
	 * Template tag to return a bbP forum's encoded email address.
	 *
	 * @uses BBP_RBE_Extension::new_topic_querystring()
	 * @uses bp_rbe_inject_qs_in_email()
	 */
	public function get_forum_encoded_email_address() {
		$querystring = $this->new_topic_querystring();

		return bp_rbe_inject_qs_in_email( $querystring . '-new' );
	}

	/**
	 * Add support for the BP Group Email Subscription plugin.
	 *
	 * This is the new way to add support for GES 3.6+.
	 *
	 * @since 1.0-RC4
	 * @since 1.0-RC7 Switched hook to use 'ass_send_email_args'.
	 *
	 * @param array  $retval     GES email args.
	 * @param string $email_type GES email type.
	 */
	public function ges_support( $retval, $email_type ) {
		if ( 'bp-ges-single' !== $email_type ) {
			return $retval;
		}

		/*
		 * Temporarily save activity object so we can reference it in the
		 * ges_extend_listener() method.
		 */
		$this->temp_activity = $retval['activity'];

		// Extend RBE's listener to add RBE support.
		add_action( 'bp_rbe_extend_listener', array( $this, 'ges_extend_listener' ) );

		return $retval;
	}

	/**
	 * Register support for GES with RBE.
	 *
	 * Since other GES plugins like BP Multiple Forum Post works by delaying GES
	 * email sending to remove duplicate emails {@see bpmfp_interrupt_original_activity_notification()},
	 * we need to let RBE's listener know about it.
	 *
	 * @since 1.0-RC4
	 *
	 * @param BP_Reply_By_Email $rbe
	 */
	public function ges_extend_listener( $rbe ) {
		// We've already done this, so stop!
		// @todo Remove this once we're ready to drop extend_activity_listener().
		if ( isset( $rbe->listener ) && $this->id === $rbe->listener->component ) {
			return;
		}

		// If activity type does not match our bbPress types, stop now!
		if ( $this->temp_activity->type != $this->activity_type && $this->temp_activity->type != 'bbp_topic_create' ) {
			return;
		}

		if ( ! isset( $rbe->listener ) ) {
			$rbe->listener = new stdClass;
		}

		$rbe->listener->component         = $this->id;
		$rbe->listener->item_id           = $this->temp_activity->item_id;
		$rbe->listener->secondary_item_id = $this->temp_activity->secondary_item_id;
		$rbe->listener->reply_to_id       = $this->temp_activity->secondary_item_id;
		$rbe->listener->user_id           = $this->temp_activity->user_id;

		// If activity type is a bbPress reply, we need to grab the topic ID manually.
		if ( $this->temp_activity->type === $this->activity_type ) {
			$rbe->listener->secondary_item_id = bbp_get_reply_topic_id( $this->temp_activity->secondary_item_id );
			$rbe->listener->reply_to_id       = bbp_get_reply_to( $this->temp_activity->secondary_item_id );
		}
	}

	/**
	 * Remove RBE listener for GES.
	 *
	 * When used in a loop like an IMAP continuous inbox check, we have to remove
	 * the RBE listener for GES since the GES RBE listener is more of a tacked-on
	 * approach than regular RBE items and can conflict with the generation of the
	 * 'Reply-To' email header for other RBE components.
	 *
	 * @since 1.0-RC5
	 */
	public function ges_remove_listener() {
		if ( isset( $this->temp_activity ) ) {
			unset( $this->temp_activity );
			remove_action( 'bp_rbe_extend_listener', array( $this, 'ges_extend_listener' ) );
		}
	}

	/**
	 * Remove users from bbPress subscriptions list.
	 *
	 * If the recipient is already subscribed to the group's "All Mail" option, we
	 * remove the recipient from bbPress' subscription list to prevent duplicate
	 * emails.
	 *
	 * This scenario might happen if a user subscribed to a bunch of bbP group
	 * topics and later switched to the group's "All Mail" subscription.
	 *
	 * @since 1.0-RC5
	 */
	public function bbp_remove_subscribers( $retval ) {
		if ( empty( $retval ) ) {
			return $retval;
		}

		// get group sub status
		$group_user_subscriptions = groups_get_groupmeta( $GLOBALS['bp']->rbe->temp->group_id, 'ass_subscribed_users' );

		// loop through all bbP topic subscribers and check against group sub status
		foreach ( $retval as $index => $user_id ) {
			$user_subscription = isset( $group_user_subscriptions[$user_id] ) ? $group_user_subscriptions[$user_id] : false;

			// if user's group status is "All Mail", remove user ID from topic subscribers
			if ( 'supersub' === $user_subscription ) {
				unset( $retval[$index] );
			}
		}
		return $retval;
	}

	/**
	 * Helper method to save an attachment from an email to a temporary directory.
	 *
	 * If passing a file path to a temporary uploaded file with $tmp_file, will do
	 * some validation against GD bbPress Attachments' routine.
	 *
	 * @since 1.0-RC6
	 *
	 * @param array $r Attachment data {
	 *     @type string $name     Required. Filename for attachment.
	 *     @type string $tmp_name Absolute file path to temporary uploaded file if available. Use if your
	 *                            attachment is already uploaded locally.
	 *     @type string $data     Inline data for the attachment to be saved to a file. Use this if $tmp_name
	 *                            isn't available.
	 *     @type int    $i        Message number
	 *     @type int    $forum_id Optional. If you have a forum ID to pass, do it here.
	 *     @type array  $params   Email parameters.
	 * }
	 * @return array If successful, 'data' key with
	 */
	public static function save_attachment( $r = array() ) {
		$retval = array();

		$r = wp_parse_args( $r, array(
			'name'     => '',
			'tmp_name' => '',
			'data'     => '',
			'i'        => 0,
			'forum_id' => 0,
			'params'   => array()
		) );

		// Calculate forum ID if email parameters are passed.
		if ( 0 === $r['forum_id'] && ! empty( $r['params'] ) ) {
			if ( ! empty( $r['params']['bbpf'] ) ) {
				$r['forum_id'] = $r['params']['bbpf'];
			}

			if ( 0 === $r['forum_id'] && ! empty( $r['params']['bbpt'] ) ) {
				$r['forum_id'] = bbp_get_topic_forum_id( $r['params']['bbpt'] );
			}

			// Something went wrong.
			if ( empty( $r['forum_id'] ) ) {
				bp_rbe_log( 'Message #' . $r['i'] . ': Problem parsing forum ID for attachments.' );
				return $retval;
			}
		}

		if ( ! empty( $r['data'] ) ) {
			$r['tmp_name'] = bp_rbe_inline_data_to_tmpfile( $r['name'], $r['data'] );
			if ( is_wp_error( $r['tmp_name'] ) ) {
				bp_rbe_log( 'Message #' . $r['i'] . ': Attachment error - could not write to temporary file.' );

				$retval['errors']['cannot_write'] = array( $r['name'] );
				return $retval;
			}
		}

		$file_array = array(
			'tmp_name' => $r['tmp_name'],
			'name'     => $r['name']
		);

		// We have a forum ID, check against GD bbPress Attachments routine.
		if ( 0 !== $r['forum_id'] && ! empty( $GLOBALS['gdbbpress_attachments'] ) ) {
			// Filesize fits requirements, so allow file.
			if ( $GLOBALS['gdbbpress_attachments']->is_right_size( array( 'size' => filesize( $r['tmp_name'] ), $r['forum_id'] ) ) ) {
				$retval['data'] = $file_array;

			// Size too big.
			} else {
				bp_rbe_log( 'Message #' . $r['i'] . ': Attachment error - could not add attachment "' . $r['name'] . '" because it is too large.' );
				$retval['errors']['too_big'] = array( $r['name'] );

				@unlink( $r['tmp_name'] );
			}

		// Bypass GD bbPress Attachments validation check.
		} else {
			$retval['data'] = $file_array;
		}

		return $retval;
	}

	/**
	 * Parse attachments from IMAP email and save temporarily.
	 *
	 * Requires GD bbPress Attachments.  We do not actually post the attachment
	 * to WordPress at this time.  We do this later in the post_attachments() method.
	 *
	 * @since 1.0-RC6
	 *
	 * @param  array    $retval     Data to add.
	 * @param  array    $data       Current data to pass to the email parser
	 * @param  resource $connection Current IMAP connection
	 * @param  int      $i          Current IMAP message number
	 * @param  array    $structure  Current IMAP structure for the message.
	 */
	public function imap_attachments( $retval, $data, $connection, $i, $structure ) {
		// No GD bbPress Attachments or no message parts? Stop now!
		if ( empty( $GLOBALS['gdbbpress_attachments'] ) || empty( $structure->parts ) ) {
			return $retval;
		}

		$topic_id = ! empty( $data['params']['bbpt'] ) ? $data['params']['bbpt'] : 0;
		$forum_id = ! empty( $data['params']['bbpf'] ) ? $data['params']['bbpf'] : 0;

		// Not a bbPress item, so stop!
		if ( empty( $topic_id ) && empty( $forum_id ) ) {
			return $retval;
		}

		// Get forum ID if still empty.
		if ( empty( $forum_id ) && $topic_id ) {
			$forum_id = bbp_get_topic_forum_id( $topic_id );
		}

		// Something went wrong.
		if ( empty( $forum_id ) ) {
			bp_rbe_log( 'Message #' . $i . ': Problem parsing forum ID for attachments.' );
			return $retval;
		}

		// If attachments are not allowed for this forum, stop!
		if ( ! $GLOBALS['gdbbpress_attachments']->enabled_for_forum( $forum_id ) ) {
			$retval['bbp_attachments_errors'] = array(
				'forum_disabled' => sprintf( __( 'Attachments have been disabled for the "%s" forum you are attempting to post to.', 'bp-rbe' ), get_the_title( $forum_id ) )
			);
			return $retval;
		}

		// Parse email for attachments.
		require_once BP_RBE_DIR . '/includes/classes/bp-reply-by-email-imap-message.php';
		$attachments = BP_Reply_By_Email_IMAP_Message::getAttachments( $connection, $i, $structure->parts );

		// No attachments, so stop!
		if ( empty( $attachments ) ) {
			return $retval;
		}

		bp_rbe_log( 'Message #' . $i . ': This bbPress item has attachments.' );

		$attachment_data = $attachment_errors = array();

		$max_files = $GLOBALS['gdbbpress_attachments']->get_max_files( false, $forum_id );

		// Attempt to save attachments to temp directory.
		foreach ( $attachments as $i => $attachment ) {
			if ( $i > $max_files ) {
				if ( empty( $attachment_errors['max_files'] ) ) {
					$attachment_errors['max_files'] = array();
				}
				$attachment_errors['max_files'][] = $attachment['filename'];

				continue;
			}

			$save = self::save_attachment( array(
				'name' => $attachment['filename'],
				'data' => $attachment['data'],
				'i'        => $i,
				'forum_id' => $forum_id,
				'subtype'  => $attachment['subtype']
			) );

			if ( ! empty( $save['data'] ) ) {
				$attachment_data[] = $save['data'];
			}
			if ( ! empty( $save['errors'] ) ) {
				$attachment_errors = array_merge_recursive( $attachment_errors, $save['errors'] );
			}
		}

		// Add our attachment metadata to the email data.
		if ( ! empty( $attachment_data ) ) {
			$retval['bbp_attachments'] = $attachment_data;
		}
		if ( ! empty( $attachment_errors ) ) {
			$retval['bbp_attachments_errors'] = $attachment_errors;
		}

		return $retval;
	}

	/**
	 * Add attachments parsed from email message into a bbPress post.
	 *
	 * @since 1.0-RC6
	 *
	 * @param int   $post_id ID of new bbPress post
	 * @param array $data    Data from email message.
	 */
	public function post_attachments( $post_id, $data ) {
		if ( empty( $data['misc']['bbp_attachments_errors'] ) ) {
			if ( empty( $data['misc']['bbp_attachments'] ) ) {
				return;
			}

			$data['misc']['bbp_attachments_errors'] = array();

		// We have errors and no attachments. Send error email and bail.
		} elseif ( empty( $data['misc']['bbp_attachments'] ) ) {
			$this->attachment_error_email( $post_id, $data );
			return;
		}

		// Require media functions.
		require_once ABSPATH . 'wp-admin/includes/file.php';
		require_once ABSPATH . 'wp-admin/includes/media.php';
		require_once ABSPATH . 'wp-admin/includes/image.php';

		foreach ( $data['misc']['bbp_attachments'] as $attachment ) {
			// Do the validation and storage stuff.
			$id = media_handle_sideload( $attachment, $post_id, null, array(
				'post_author' => $data['user_id']
			) );

			// If error storing permanently, unlink.
			if ( is_wp_error( $id ) ) {
				bp_rbe_log( 'Message #' . $data['i'] . ': Attachment error - could not add attachment "' . $attachment['name'] . '" to bbPress post. Reason is "' . $id->get_error_message() . '"' );

				@unlink( $attachment['tmp_name'] );

				if ( empty( $data['misc']['bbp_attachments_errors']['upload_error'] ) ) {
					$data['misc']['bbp_attachments_errors']['upload_error'] = array();
				}
				$data['misc']['bbp_attachments_errors']['upload_error'][$attachment['name']] = $id->get_error_message();
				continue;
			}

			// Add GD bbPress attachment marker.
			update_post_meta( $id, '_bbp_attachment', '1' );

			bp_rbe_log( 'Message #' . $data['i'] . ': Attachment "' . $attachment['name'] . '" successfully added to bbPress post.' );
		}

		// Send feedback email to author if there are attachment errors.
		if ( ! empty( $data['misc']['bbp_attachments_errors'] ) ) {
			$this->attachment_error_email( $post_id, $data );
		}
	}

	/**
	 * Send feedback email to author if there are attachment errors.
	 *
	 * Only sent if the bbPress post created via RBE was successful.
	 *
	 * @since 1.0-RC6
	 *
	 * @param int   $post_id ID of new bbPress post
	 * @param array $data    Data from email message.
	 */
	protected function attachment_error_email( $post_id, $data ) {
		$errors = array();
		foreach ( $data['misc']['bbp_attachments_errors'] as $type => $error_data ) {
			switch ( $type ) {
				case 'too_big' :
					$forum_id = bbp_get_reply_forum_id( $post_id );

					$errors[] = sprintf( __( 'You tried to attach files that that are larger than the filesize limit of %1$s KB.  The following attachments were not added to the forum post: %2$s', 'bp-rbe' ), $GLOBALS['gdbbpress_attachments']->get_file_size( false, $forum_id ), implode( ', ', $error_data ) );

					break;

				case 'cannot_write' :
					$errors[] = sprintf( __( 'We could not save the following attachments locally due to a server permissions error: %s', 'bp-rbe' ), implode( ', ', $error_data ) );

					break;

				case 'max_files' :
					$errors[] = sprintf( __( 'You tried to attach too many files.  The following attachments were not added to the forum post: %s', 'bp-rbe' ), implode( ', ', $error_data ) );

					break;

				case 'upload_error' :
					foreach ( $error_data as $filename => $e ) {
						$errors[] = "{$filename} - $e";
					}
					break;

				default :
					$errors[] = $error_data;

					break;
			}
		}

		$error_content = '';
		foreach ( $errors as $error ) {
			$error_content .= "- {$error}\n";
		}

		// Set data based on the bbPress post type.
		$post = get_post( $post_id );
		if ( 'topic' === $post->post_type ) {
			$topic_id  = $post_id;
			$permalink = bbp_get_topic_permalink( $post_id );
		} else {
			$topic_id  = bbp_get_reply_topic_id( $post_id );
			$permalink = bbp_get_reply_permalink( $post_id );
		}

		$message = sprintf( __( 'Hi there,

You attempted to post some attachments to the "%1$s" topic via email:
%2$s

Unfortunately, we were not able to include them into the forum post due to the following reasons:

%3$s

Please visit the forum post via your web browser to attach your file(s).

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), get_the_title( $topic_id ), $permalink, $error_content );

		$sitename = wp_specialchars_decode( get_blog_option( bp_get_root_blog_id(), 'blogname' ), ENT_QUOTES );
		$subject  = sprintf( __( '[%s] Your attachments could not be posted to the forum thread', 'bp-rbe' ), $sitename );

		// temporarily remove RBE mail filter by wiping out email querystring
		add_filter( 'bp_rbe_querystring', '__return_false' );

		// send email
		wp_mail( get_userdata( $data['user_id'] )->user_email, $subject, $message );

		// add it back
		remove_filter( 'bp_rbe_querystring', '__return_false' );
	}
}
